defaults_go: &DEFAULTS_GO
  language: go
  go: "1.11.4"
  cache:
    directories:
      - vendor

defaults_js: &DEFAULTS_JS
  language: node_js
  # we run make to install everything
  install: []
  cache:
    yarn: true

jobs:
  include:
    - stage: Test
      <<: *DEFAULTS_GO
      env:
        - DESC="Test Go code"
      before_script:
        - make mock-assets
      script: make test-go
      after_success:
        - bash <(curl -s https://codecov.io/bash) -F backend

    - stage: Test
      <<: *DEFAULTS_JS
      env:
        - DESC="Test JavaScript code"
        - NODE_ENV=test
      script: make test-js
      after_success:
        - bash <(curl -s https://codecov.io/bash) -F ui -s ui

    - stage: Lint
      <<: *DEFAULTS_JS
      env:
        - DESC="Lint git commit"
      script: make lint-git-ci

    - stage: Lint
      <<: *DEFAULTS_GO
      env:
        - DESC="Lint Go code"
      before_script:
        - make mock-assets
      script: make lint-go

    - stage: Lint
      <<: *DEFAULTS_JS
      env:
        - DESC="Lint JavaScript code"
      script: make lint-js

    - stage: Lint
      <<: *DEFAULTS_JS
      env:
        - DESC="Lint documentation"
      script: make lint-docs

    - stage: Build Docker image
      language: generic
      addons:
        apt:
          packages:
            - docker-ce
      script: make docker-image

    - stage: Build and Deploy
      <<: *DEFAULTS_GO
      cache:
        # disable cache so we always build from scratch
        directories: []
      before_script:
        # this stage needs to build everything including assets file and that
        # requires running webpack, so we need nodejs here
        - nvm install $(< .nvmrc)
      script:
        # compile assets via webpack and build those into bindata_assetfs.go file
        - make bindata_assetfs.go
        # verify that there are no uncommited changes from (re)compiling sass
        # assets
        - git diff --exit-code
        # install bakelite, we can't "go get" a tag from github, so we fetch the binary
        - export BAKELITE_VERSION="v0.1.0"
        - export BAKELITE_OS=$(go env GOHOSTOS)
        - export BAKELITE_ARCH="$(go env GOHOSTARCH)"
        - curl -L -o bakelite.tar.gz "https://github.com/terinjokes/bakelite/releases/download/${BAKELITE_VERSION}/bakelite-${BAKELITE_OS}-${BAKELITE_ARCH}.tar.gz"
        - tar -xf bakelite.tar.gz
        # and now compile using bakelite for all target archs
        - export SOURCE_DATE_EPOCH=$(git show -s --format=%ci ${TRAVIS_TAG:-${TRAVIS_COMMIT}}^{commit})
        - ./bakelite-${BAKELITE_OS}-${BAKELITE_ARCH} -platforms="-plan9" -ldflags="-X main.version=\"$(make show-version)\"" github.com/prymitive/karma
        - for i in karma-*; do tar --mtime="${SOURCE_DATE_EPOCH}" --owner=0 --group=0 --numeric-owner -c $i | gzip -n - > $i.tar.gz; done
        - shasum -a 512 karma-*.tar.gz | tee sha512sum.txt
      deploy:
        provider: releases
        api_key:
          secure: Wmix2qr1q6BakTWI4Wc6hQEw27OZMb04OeAfPhM84ZUMd30t9BNAdfERsNkuY2VylnJ9KhbBdHmd0XWqqAvI55/lZTLkUW1gD8ZEjly23w735HNm/9vHESjmUUZdZK/bLFLr1cQq3+jgGdO0ZNcAEGJhKZNA1TcdA7t0uNhg0xSejVYRMxOLx3wzVF9oGSq36m8nhLIWG9mlRkZBfE+0Q4pHJK+diqICoTUIZNhZO1Lu8uO6jNpAmgRfhF7q1LGcoa0ZeHV8OsB5OhpLXDExyNw4znxPzWBu5y9+85fjeRKpmGd0KFT2PRnwB9XkSo20Mmk94x+t07+0VR6NtyKXPG5g8i/PxLQr4f1ZwPXNW0xKq5t9KLycnj3Gf/xlaXyk4d5V64EKUTbDP37emodCwPyxaozoRfDvbT7Oyj1jtHoj+6ijYrPBpjc4fnz7xBoydD5R+we/dzcnM/1ZlFnpGckWsCL7QyNuGQQJ9vk2Xo3H5wylL1Ol2BB/aWZYAuBbwXaXZnOg79b/2SQkxHrEveAbDlVovSvqsOtq6DI6oY4VyWsQzjQHvmFMfTp1LPWwh/EL1q2+feDM4vEsx9OMLegFCoAzKPy9xm0teZbYKdMfJammBjvRYZh9h+Hw43/atXktG3zSuR4C/HmXLoswq+c2bjJWlcM8jvB29oo5uA4=
        skip_cleanup: true
        file_glob: true
        file:
          - karma-*.tar.gz
          - sha512sum.txt
        on:
          repo: prymitive/karma
          tags: true

    - stage: Deploy demo app to Heroku
      # deploy on every job that isn't a PR, this way we:
      # * don't deploy on PRs send from forks, only internal
      # * deploy only once per PR - since we will deploy on branch job
      if: repo = prymitive/karma AND type != pull_request
      env:
        # HEROKU_TOKEN, valid forever, needed to push docker image and release
        # it on heroku app
        - secure: "zr1fHhSIZQgA7wT8PALNyAhilCZBpvziL2zuC7LJvYy9PSHatV1B+/Tl5Ao1MGlqiD9wHdRXhw/Z7Ol7vR84LlEXIQv/PZvpYtdGrwP/dmwEzRi59puNHW/sDa5fU27U5bgGW9VPYKzQFGBIknRz9yEpGAsDqzWSRwEQofgnuF1Cv0JJXN/tcZs/fcXz4AhFSXRb8Rde2geHRVGlz3UnuECQ9LnzTI/xxIP/+YORvMpTcwJtQwq/NhucYXzms19XM94xz5IE/cwf8yV9YZalm867aR2yQJvkMmOaufSYoFgRrghqnpzEe1wyuZvAXkwwZErw5swBY3Zo1YkGUeU761g3v+Nh+dlVKFaBVYgDt9W9bb1QsK1Lbgix4UYSx8Tz06X83xz2f6hWXS1Yvju7yE7M1VmjAhevWW+ZpTf3vwOH2UeUHyAMOddggMSIRfaxC9W74Trt8zxKlM+8sQiaEE3c6Ea+ZJxq1baDJvHQPdfuj2844uKaAL7qNVuRNRPAa0bp0qkzLyl3f5P3XK54mM4vayBRCQ+qflq+XGXY5G8+LukUNnKMq/KuPZZ1A6pOr3kTj4qKaxAcxOJQq4/xc+zJaiQFkzfMj1//LKMyvrRtqMnPV+P3qtgMGzA4Z3JlHUOgPHgbZ9WTlpV5yi066Onro+j2NFehjY+FV6R2gOI="
      language: generic
      addons:
        apt:
          packages:
            - docker-ce
      before_script:
        # a safe and boring version of cat > .netrc < EOF
        - echo "machine api.heroku.com" >> $HOME/.netrc
        - echo "  login l.mierzwa@gmail.com" >> $HOME/.netrc
        - echo "  password $HEROKU_TOKEN" >> $HOME/.netrc
      script:
        - docker build --build-arg VERSION=$(make show-version) -t registry.heroku.com/karma-demo/web -f demo/Dockerfile .
        - docker login -u _ -p "$HEROKU_TOKEN" registry.heroku.com
        - docker push registry.heroku.com/karma-demo/web
        # bundled heroku cli doesn't know anything about containers, update it
        - curl https://cli-assets.heroku.com/install.sh | sh
        - /usr/local/bin/heroku container:release web --app karma-demo
